// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// V1HealthCheckHandlerFunc turns a function with the right signature into a v1 health check handler
type V1HealthCheckHandlerFunc func(V1HealthCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn V1HealthCheckHandlerFunc) Handle(params V1HealthCheckParams) middleware.Responder {
	return fn(params)
}

// V1HealthCheckHandler interface for that can handle valid v1 health check params
type V1HealthCheckHandler interface {
	Handle(V1HealthCheckParams) middleware.Responder
}

// NewV1HealthCheck creates a new http.Handler for the v1 health check operation
func NewV1HealthCheck(ctx *middleware.Context, handler V1HealthCheckHandler) *V1HealthCheck {
	return &V1HealthCheck{Context: ctx, Handler: handler}
}

/*V1HealthCheck swagger:route GET / Health v1HealthCheck

Check the health of the service.

Check the health of the api-first-01 service. This is critical to make the healthy GKE workload.

*/
type V1HealthCheck struct {
	Context *middleware.Context
	Handler V1HealthCheckHandler
}

func (o *V1HealthCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV1HealthCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

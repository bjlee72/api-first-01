// Code generated by go-swagger; DO NOT EDIT.

package hello

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// V1ReadHelloHandlerFunc turns a function with the right signature into a v1 read hello handler
type V1ReadHelloHandlerFunc func(V1ReadHelloParams) middleware.Responder

// Handle executing the request and returning a response
func (fn V1ReadHelloHandlerFunc) Handle(params V1ReadHelloParams) middleware.Responder {
	return fn(params)
}

// V1ReadHelloHandler interface for that can handle valid v1 read hello params
type V1ReadHelloHandler interface {
	Handle(V1ReadHelloParams) middleware.Responder
}

// NewV1ReadHello creates a new http.Handler for the v1 read hello operation
func NewV1ReadHello(ctx *middleware.Context, handler V1ReadHelloHandler) *V1ReadHello {
	return &V1ReadHello{Context: ctx, Handler: handler}
}

/*V1ReadHello swagger:route GET /v1/hellos/{hello_id} Hello v1ReadHello

Read a hello.

Read a specific hello with its ID.

*/
type V1ReadHello struct {
	Context *middleware.Context
	Handler V1ReadHelloHandler
}

func (o *V1ReadHello) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV1ReadHelloParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package hello

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewV1ListHellosParams creates a new V1ListHellosParams object
// no default values defined in spec.
func NewV1ListHellosParams() V1ListHellosParams {

	return V1ListHellosParams{}
}

// V1ListHellosParams contains all the bound params for the v1 list hellos operation
// typically these are obtained from a http.Request
//
// swagger:parameters v1_list_hellos
type V1ListHellosParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The number of hellos to retrieve.
	  Required: true
	  In: query
	*/
	Count int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewV1ListHellosParams() beforehand.
func (o *V1ListHellosParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCount, qhkCount, _ := qs.GetOK("count")
	if err := o.bindCount(qCount, qhkCount, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCount binds and validates parameter Count from query.
func (o *V1ListHellosParams) bindCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("count", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("count", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("count", "query", "int32", raw)
	}
	o.Count = value

	return nil
}
